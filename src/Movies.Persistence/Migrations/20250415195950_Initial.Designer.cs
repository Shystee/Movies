// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Movies.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250415195950_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Movies.Domain.MovieAggregate.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.MovieAggregate.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("movie", (string)null);
                });

            modelBuilder.Entity("movie_genre", b =>
                {
                    b.Property<Guid>("movie_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("genre_id")
                        .HasColumnType("uuid");

                    b.HasKey("movie_id", "genre_id");

                    b.HasIndex("genre_id");

                    b.ToTable("movie_genre");
                });

            modelBuilder.Entity("Movies.Domain.MovieAggregate.Genre", b =>
                {
                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("GenreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("GenreId");

                            b1.ToTable("genre");

                            b1.WithOwner()
                                .HasForeignKey("GenreId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.GenreName", "Name", b1 =>
                        {
                            b1.Property<Guid>("GenreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar")
                                .HasColumnName("name");

                            b1.HasKey("GenreId");

                            b1.ToTable("genre");

                            b1.WithOwner()
                                .HasForeignKey("GenreId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Movies.Domain.MovieAggregate.Movie", b =>
                {
                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.HasKey("MovieId");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.AgeRestriction", "AgeRestriction", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("varchar")
                                .HasColumnName("age_restriction");

                            b1.HasKey("MovieId");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.Duration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("duration_minutes");

                            b1.HasKey("MovieId");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.Rating", "Rating", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<float>("AverageRating")
                                .HasColumnType("real")
                                .HasColumnName("average_rating");

                            b1.Property<int>("RatingCount")
                                .HasColumnType("integer")
                                .HasColumnName("rating_count");

                            b1.HasKey("MovieId");

                            b1.HasIndex("AverageRating")
                                .HasDatabaseName("IX_Movies_Rating");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.ReleaseDate", "ReleaseDate", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("release_date");

                            b1.HasKey("MovieId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_Movies_ReleaseDate");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.Tagline", "Tagline", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("varchar")
                                .HasColumnName("tagline");

                            b1.HasKey("MovieId");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsOne("Movies.Domain.MovieAggregate.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar")
                                .HasColumnName("title");

                            b1.HasKey("MovieId");

                            b1.ToTable("movie");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("AgeRestriction")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("ReleaseDate")
                        .IsRequired();

                    b.Navigation("Tagline")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("movie_genre", b =>
                {
                    b.HasOne("Movies.Domain.MovieAggregate.Genre", null)
                        .WithMany()
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.MovieAggregate.Movie", null)
                        .WithMany()
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
